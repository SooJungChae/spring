#스프링 철저 입문 2장 공부하기

## 2.3 데이터의 형변환



---

## 2.4 프로퍼티 관리

데이터베이스에 접속하는 연결 정보처럼 여러 곳에서 사용되지만 잘 변경되지 않는 값이 있다.
그런데 만약 설정 파일이 바뀌게 된다면 여기저기서 사용 된 코드를 하나씩 바꿔주는 게 번거로울 것이다.
Spring 은 프로퍼티 관리를 효과적으로 할 수 있게 해준다.

1) Bean 정의 할 때 프로퍼티 활용
@Value 어노테이션을 활용해서 별도의 프로퍼티 파일에 정의된 값을 소스에 주입할 수 있다.
```
@Value("${datasource.url}") String url, ...
```
- `${프로퍼티키}`부분은 나중에 다른 값으로 치환될 자리라는 뜻이다. 플레이스 홀더 라고도 한다.
- 프로퍼티 파일의 위치는 <context:property-placeholder> 요소에서 location 에 지정한다.
```
<context:property-placeholder location="classpath:application.properties"/>
```
- 같은 이름의 프로퍼티가 중복 설정되어 있다면 `JVM 시스템 프로퍼티 > 환경 변수 > 프로퍼티 파일` 우선순위에 따라 프로퍼티가 적용된다.
- 플레이스 홀더에 기본 값을 줄 수 있다. 
```
${프로퍼티 키:기본값}
${datasource.username:demo}
```

---

## 2.5 스프링 표현 언어

### SpEL (Spring Expression Language)

---

## 2.6 리소스 추상화

프로젝트를 배포했을 때 서버의 경로와 로컬의 경로가 달라서 에러가 발생하는 경우가 있다.
이걸 방지할 수 있는 방법인데, 절대 경로를 사용해서 리소스를 추상화 시키는 방법이다.

### ResourceLoader

Resource 객체를 가져오려면 `getResource`메서드의 매개변수로 리소스의 위치를 지정하면 된다.
리소스의 위치를 지정할 땐 일반적으로 파일시스템 상의 경로나 url 상의 경로를 사용하는데,
클래스상의 리소스를 지정해야 한다면 `classpath:` 접두어를 붙이면 된다.

- 프로퍼티 기능을 사용해서 `@Value("${resource.greeting:classpath:greeting.json}")`처럼 변경하면 하드코딩하지 않고 손쉽게 경로에 접근할 수 있다.
- classpath: 와 비슷하지만, classpath*: 는 jar 파일과 같은 다른 모듈 안에 포함된 파일도 읽을 수 있다.  
* 사용하면 파일을 못찾아도 예외를 발생시키지 않는다.

---

## 2.7 메세지 관리

프로젝트를 진행하면서 오류나 알림창 같은 문자열 형태의 메세지를 일일이 작성하곤 했다.
Spring 에서는 이런 메세지를 쉽게 입력할 수도 있고 미리 메세지를 입력해두는 인터페이스가 있다.

### MessageSource

MessageSource 인터페이스를 들여다보면 3가지가 있는데,
사용자가 호출할 경우 차례대로 전부 대입해봐서 메세지에 해당하는 인수와 일치하는 코드를 사용하여 메세지를 만들어낸다.

### MessageSource 사용법

1) MessageSource의 Bean 정의
2) 프로퍼티 파일에 메세지 정의 --> 이곳에다가 나중에 필요한 메세지들을 입력해두고 사용하면 된다.
3) DI 에서 `MessageSource` 를 주입받고
4) `getMessage` 메서드를 호출해서 사용한다.
5) 문자열을 하드코딩 하기 싫다면 `MessageSourceResolvable`를 활용한다.

